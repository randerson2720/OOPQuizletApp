q	The relationship between Laptop and Screen can best be categorized as
a	Inheritance
b	Association
c	Ownership
d	Private
?	c
q	Which one of these is not a purpose of information hiding in object-oriented programming?	
a	To protect the values of variables from being changed inappropriately
b	To free other programmers from having to know too many details of the inner workings of the class.
c	To protect people's personal information from hackers.
d	To provide an opportunity to format or convert data before returning it.
?	d	
q	The relationship between Bayonet and Weapon could best be described as
a	Inheritance
b	Association
c	Ownership
d	Private
?	a
q	Which of the following is not true of the relationship composition?
a	The owner is responsible for creating and destroying the object it owns
b	Other objects of the owner type can own the very same object.
c	It involves exclusive ownership, meaning that no other object could own the owned object.
d	It, like aggregation, is a form of ownership.
?	b
q	In the relationship between Hammer and Tool, which of the following is correct?
a	Hammer is the superclass, and Tool is the subclass.
b	Hammer is the subclass, and Tool is the superclass.
c	Hammer is the owner, and Tool is the owned.
d	Hammer is the owned, and Tool is the owner.
?	b
q	Which of the following is a false statement?
a	A class is like a blueprint, and an object is something built according to that blueprint.
b	A class can contain data members and methods.
c	A class can contain objects as data members within it.
d	Usually, only one object can be built for any given class.
?	d
q	Which of the following is false about an abstract class?
a	It contains one or more abstract functions.
b	You cannot create an object of an abstract class.
c	It cannot have any non-abstract functions.
d	It is the most generic version of a family of related types of things.
?	c
q	Why is polymorphism powerful?
a	It enables us to refer to related objects generally but still access specific functionality for each object.
b	It enables us to build more complicated objects starting from simpler ones.
c	It helps us protect data from being inadvertently changed.
d	It helps us build objects that contain other objects.
?	a
q	Why do we write public get and set functions?
a	Object-oriented languages require us to do so.
b	If we didnâ€™t, there would be no way to read or write the values of the data members of a class.
c	In combination with making data private, these public functions give us a way to read and write the values of these variables in a controlled way.
d	They make a program run more efficiently.
?	c
q	One problem associated with software development is rigidity, which means
a	It is difficult to move code from one project to another.
b	It is difficult to change the code to meet changing or additional needs.
c	Changing the code tends to break it.
d	It is difficult to use.
?	b
q	Which pattern tries to make it easier to create a variety of related objects?
a	Model-View-Controller
b	Singleton
c	Factory
d	Delegation
?	c
q	Which pattern tries to avoid mixing the storage of data and how it is displayed?
a	Model-View-Controller
b	Singleton
c	Factory
d	Delegation
?	a
q	Which pattern often uses a private constructor and static functions as part of its design?
a	Model-View-Controller
b	Singleton
c	Factory
d	Delegation
?	b
q	Which pattern often uses aggregation or composition to enable an owner to perform a task by asking for help from the things it owns?
a	Model-View-Controller
b	Singleton
c	Factory
d	Delegation
?	c
q	Which pattern is used particularly to ensure consistency across multiple threads?
a	Model-View-Controller
b	Singleton
c	Factory
d	Delegation
?	b
q	Which concepts enable the Factory pattern to be particularly useful?
a	Aggregation and Composition
b	Information Hiding and Encapsulation
c	Inheritance and Polymorphism
d	Abstraction and Ownership
?	a
q	Which of the following is a false statement?
a	An interface is a data type that consists entirely of abstract functions.
b	A class can implement multiple interfaces but extend only one class.
c	-extends- (i.e. inheritance) means -is a- whereas -implementing an interface- means -acts like-
d	Using interfaces helps avoid violating the Liskov Substitution Principle.
?	a
q	The Dependency Inversion Principle focuses on
a	The relationship between superclasses and subclasses
b	The relationship between classes and interfaces
c	The relationship between owners and the things they own
d	The need to make data private and accessible only through functions
?	b
q	Which principle advises us to be as focused and specific as possible in grouping together behaviors?
a	Dependency Inversion Principle
b	Interface Segregation Principle
c	Single Responsibility Principle
d	Open-Closed Principle	
?	d
q	Which principle helps us avoid designing classes that try to do too much?
a	Dependency Inversion Principle
b	Interface Segregation Principle
c	Single Responsibility Principle
d	Open-Closed Principles
?	c